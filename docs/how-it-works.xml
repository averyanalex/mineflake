<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE article>
<article
  xmlns="http://docbook.org/ns/docbook" version="5.0"
  xmlns:xlink="http://www.w3.org/1999/xlink" >
  <info>
    <title></title>
  </info>
  <section xml:id="how-mineflake-works">
    <title>How mineflake works</title>
    <section xml:id="nixos">
      <title>NixOS</title>
      <para>
        Mineflake relies on NixOS, which gives us a reliable system and
        atomic updates with simple rollbacks, and its Nix package
        manager which allows you to create fully repeatable packages.
        Nix, when it downloads dependencies (plugins, other packages
        which are needed to build plugins) and builds the result,
        cryptographically hashes them and puts them in
        <literal>/nix/store</literal> , its repository with all the
        packages.
      </para>
      <para>
        When we start the rebuild process Nix will create preconfigured
        configs and load server dependencies.
      </para>
    </section>
    <section xml:id="containers">
      <title>Containers</title>
      <para>
        After Nix has downloaded and built containers, containers -
        isolated lightweight virtual machines - come into play. We use
        containers not for the isolation of dependencies (this is what
        Nix provides by itself) but for security - ports are limited,
        the Internet can be disabled, an extra level of abstraction for
        viruses and hackers. The container contains another NixOS system
        but with our <literal>/nix/store</literal>.
      </para>
    </section>
    <section xml:id="boot-script">
      <title>Boot script</title>
      <para>
        After the container is running, the boot script starts. Its
        purpose is simple - to prepare a place to start our server. It
        creates folders, carefully puts configs in their folders,
        replaces secrets in them, links from
        <literal>/nix/store</literal> our plugins and starts the server.
      </para>
    </section>
  </section>
</article>
